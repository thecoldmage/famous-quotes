// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and user management
model User {
  id            String     @id @default(cuid())
  email         String     @unique
  username      String     @unique
  passwordHash  String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  isAdmin       Boolean    @default(false)

  // Relations
  votes         Vote[]
  favorites     Favorite[]

  @@index([email])
  @@index([username])
}

// Person model (famous people and fictional characters)
model Person {
  id                String    @id @default(cuid())
  name              String
  description       String    @db.Text // Physical description
  biography         String    @db.Text // Brief biography
  isRealPerson      Boolean   @default(true) // true for real people, false for fictional
  category          String?   // e.g., "philosopher", "scientist", "author", "character"
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  quotes            Quote[]
  portraits         Portrait[]

  @@index([name])
  @@index([category])
}

// Quote model
model Quote {
  id            String     @id @default(cuid())
  text          String     @db.Text
  personId      String
  date          String?    // Optional: date of the quote
  origin        String?    // Optional: source (book, movie, interview, etc.)
  originName    String?    // Optional: name of the source
  upvotes       Int        @default(0)
  downvotes     Int        @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Relations
  person        Person     @relation(fields: [personId], references: [id], onDelete: Cascade)
  tags          QuoteTag[]
  votes         Vote[]
  favorites     Favorite[]

  @@index([personId])
  @@index([upvotes])
}

// Tag model for categorization
model Tag {
  id        String     @id @default(cuid())
  name      String     @unique // e.g., "philosophy", "science", "love"
  slug      String     @unique // URL-friendly version
  createdAt DateTime   @default(now())

  // Relations
  quotes    QuoteTag[]

  @@index([slug])
}

// Join table for Quote-Tag many-to-many relationship
model QuoteTag {
  id        String   @id @default(cuid())
  quoteId   String
  tagId     String

  // Relations
  quote     Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([quoteId, tagId])
  @@index([quoteId])
  @@index([tagId])
}

// Vote model (user votes on quotes)
model Vote {
  id        String   @id @default(cuid())
  userId    String
  quoteId   String
  value     Int      // 1 for upvote, -1 for downvote
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quote     Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)

  @@unique([userId, quoteId]) // One vote per user per quote
  @@index([userId])
  @@index([quoteId])
}

// Favorite model (user favorites)
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  quoteId   String
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quote     Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)

  @@unique([userId, quoteId]) // One favorite per user per quote
  @@index([userId])
  @@index([quoteId])
}

// Portrait model (generated images)
model Portrait {
  id          String   @id @default(cuid())
  personId    String
  imageUrl    String   // URL to stored image
  prompt      String   @db.Text // The prompt used to generate the image
  isPrimary   Boolean  @default(false) // Primary portrait to display
  createdAt   DateTime @default(now())

  // Relations
  person      Person   @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@index([personId])
}

// Profanity filter for usernames
model ProfanityFilter {
  id        String   @id @default(cuid())
  term      String   @unique
  createdAt DateTime @default(now())

  @@index([term])
}
